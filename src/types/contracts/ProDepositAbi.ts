/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ProDepositAbiInterface extends utils.Interface {
  functions: {
    "ANNUAL_RATE()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "addressList(uint256)": FunctionFragment;
    "addressToBalance(address)": FunctionFragment;
    "calculateInterest(address)": FunctionFragment;
    "deposit()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerDeposit()": FunctionFragment;
    "ownerWithdraw()": FunctionFragment;
    "userDeposits(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ANNUAL_RATE"
      | "PRECISION"
      | "addressList"
      | "addressToBalance"
      | "calculateInterest"
      | "deposit"
      | "owner"
      | "ownerDeposit"
      | "ownerWithdraw"
      | "userDeposits"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ANNUAL_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterest",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ANNUAL_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositEventObject {
  user: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface ProDepositAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProDepositAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ANNUAL_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    addressList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addressToBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerDeposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerWithdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        depositTime: BigNumber;
        lastInterestUpdate: BigNumber;
      }
    >;

    withdraw(
      needAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  ANNUAL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  addressList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  addressToBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  calculateInterest(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerDeposit(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerWithdraw(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userDeposits(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      depositTime: BigNumber;
      lastInterestUpdate: BigNumber;
    }
  >;

  withdraw(
    needAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    ANNUAL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addressList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    addressToBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerDeposit(overrides?: CallOverrides): Promise<void>;

    ownerWithdraw(overrides?: CallOverrides): Promise<void>;

    userDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        depositTime: BigNumber;
        lastInterestUpdate: BigNumber;
      }
    >;

    withdraw(
      needAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256)"(
      user?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(user?: string | null, amount?: null): DepositEventFilter;

    "Withdraw(address,uint256)"(
      user?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(user?: string | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    ANNUAL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addressList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressToBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerDeposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    ownerWithdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      needAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ANNUAL_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressToBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerDeposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerWithdraw(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      needAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
